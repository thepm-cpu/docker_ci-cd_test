name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Run workflow on push to main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    outputs:
      image_tag: ${{ steps.get_tag.outputs.tag }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🧪 Run dummy test
        run: echo "Dummy test passed!"

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🕒 Generate dynamic tag
        id: get_tag
        run: echo "tag=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            thepm002/docker_ci-cd_test:latest
            thepm002/docker_ci-cd_test:${{ steps.get_tag.outputs.tag }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📡 Deploy to Droplet via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: root
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            TAG=${{ needs.build-and-push.outputs.image_tag }}

            echo "🔍 Checking for container using port 80..."
            CONTAINER_ON_PORT_80=$(docker ps --filter "publish=80" -q)
            if [ ! -z "$CONTAINER_ON_PORT_80" ]; then
              echo "⚠️ Stopping container using port 80: $CONTAINER_ON_PORT_80"
              docker stop $CONTAINER_ON_PORT_80
              docker rm $CONTAINER_ON_PORT_80
            fi

            echo "🛑 Stopping and removing old container 'flask-app' (if exists)..."
            docker stop flask-app || true
            docker rm flask-app || true

            echo "🔐 Logging into Docker Hub..."
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

            echo "📥 Pulling image: thepm002/docker_ci-cd_test:$TAG"
            docker pull thepm002/docker_ci-cd_test:$TAG

            echo "🚀 Starting new container..."
            docker run -d --name flask-app -p 80:5000 thepm002/docker_ci-cd_test:$TAG
